generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model alergen {
  alergenID Int    @id @default(autoincrement())
  number    String @unique(map: "number") @db.VarChar(30)
  name      String @db.VarChar(50)
  food      food[]
}

model camp {
  date_from    DateTime       @db.Date
  date_to      DateTime       @db.Date
  description  String?        @db.VarChar(4000)
  name         String         @db.VarChar(50)
  price        Int
  campID       Int            @id @default(autoincrement())
  menu         menu[]
  program      program[]
  registration registration[]
  worker       worker[]
}

model food {
  alergenID   Int
  description String? @db.VarChar(750)
  name        String  @db.VarChar(75)
  type        Int     @db.TinyInt
  foodID      Int     @id @default(autoincrement())
  menuID      Int     @db.UnsignedInt
  alergen     alergen @relation(fields: [alergenID], references: [alergenID], onDelete: NoAction, onUpdate: NoAction, map: "food_ibfk_1")
  menu        menu    @relation(fields: [menuID], references: [menuID], onDelete: NoAction, onUpdate: NoAction, map: "food_ibfk_2")

  @@index([alergenID], map: "alergenID")
  @@index([menuID], map: "menuID")
}

model job {
  description String?  @db.VarChar(250)
  type        Int      @db.TinyInt
  jobID       Int      @id @default(autoincrement()) @db.UnsignedInt
  worker      worker[]
}

model legal_representative {
  psc                    BigInt
  city                   String   @db.VarChar(30)
  adress                 String   @db.VarChar(50)
  birthdate              DateTime @db.Date
  email                  String   @db.VarChar(50)
  first_name             String   @db.VarChar(30)
  last_name              String   @db.VarChar(30)
  phone_number           BigInt
  pin                    BigInt
  legal_representativeID Int      @id @default(autoincrement()) @db.UnsignedInt
  user                   user[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model login {
  email    String   @db.VarChar(50)
  role     Int      @db.TinyInt
  name     String   @unique(map: "login") @db.VarChar(30)
  password String   @db.VarChar(60)
  loginID  Int      @id @default(autoincrement()) @db.UnsignedInt
  user     user[]
  worker   worker[]
}

model logs_login_reg {
  id      Int      @id @default(autoincrement()) @db.UnsignedInt
  loginID Int
  action  String   @db.VarChar(50)
  date    DateTime @db.DateTime(0)
}

model logs_registration {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  registrationID Int
  action         String   @db.VarChar(50)
  date           DateTime @db.DateTime(0)
}

model menu {
  time   DateTime @db.DateTime(0)
  menuID Int      @id @default(autoincrement()) @db.UnsignedInt
  campID Int
  food   food[]
  camp   camp     @relation(fields: [campID], references: [campID], onUpdate: Restrict, map: "FK_Menu_Camp")

  @@index([campID], map: "FK_Menu_Camp")
}

model profile {
  modification_date DateTime @db.DateTime(0)
  suffix            String   @db.VarChar(8)
  type              String   @db.VarChar(50)
  upload_date       DateTime @db.DateTime(0)
  profileID         Int      @id @default(autoincrement()) @db.UnsignedInt
  worker            worker[]
}

model program {
  description String?  @db.VarChar(4000)
  from        DateTime @db.DateTime(0)
  name        String   @db.VarChar(60)
  to          DateTime @db.DateTime(0)
  programID   Int      @id @default(autoincrement()) @db.UnsignedInt
  campID      Int
  camp        camp     @relation(fields: [campID], references: [campID], onUpdate: Restrict, map: "FK_Program_Camp")

  @@index([campID], map: "FK_Program_Camp")
}

model registration {
  date           DateTime @db.DateTime(0)
  is_paid        Boolean
  registrationID Int      @id @default(autoincrement()) @db.UnsignedInt
  userID         Int
  campID         Int
  user           user     @relation(fields: [userID], references: [userID], onUpdate: Restrict, map: "FK_registration_user")
  camp           camp     @relation(fields: [campID], references: [campID], onUpdate: Restrict, map: "FK_registration_camp")

  @@index([campID], map: "FK_registration_camp")
  @@index([userID], map: "userID")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  birthdate              DateTime              @db.Date
  first_name             String                @db.VarChar(30)
  last_name              String                @db.VarChar(30)
  phone_number           BigInt
  pin                    BigInt
  userID                 Int                   @id @default(autoincrement())
  directoryID            Int?                  @db.UnsignedInt
  legal_representativeID Int?                  @db.UnsignedInt
  loginID                Int?                  @db.UnsignedInt
  registration           registration[]
  legal_representative   legal_representative? @relation(fields: [legal_representativeID], references: [legal_representativeID], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Legal_representative")
  login                  login?                @relation(fields: [loginID], references: [loginID], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Login")

  @@index([directoryID], map: "FK_User_Directory")
  @@index([legal_representativeID], map: "FK_User_Legal_representative")
  @@index([loginID], map: "FK_User_Login")
}

model worker {
  email        String? @db.VarChar(50)
  first_name   String? @db.VarChar(35)
  last_name    String? @db.VarChar(35)
  phone_number BigInt?
  title        String? @db.VarChar(20)
  workerID     Int     @id @unique(map: "workerID") @default(autoincrement())
  campID       Int
  jobID        Int     @db.UnsignedInt
  loginID      Int?    @db.UnsignedInt
  profileID    Int     @db.UnsignedInt
  job          job     @relation(fields: [jobID], references: [jobID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Worker_Job")
  login        login?  @relation(fields: [loginID], references: [loginID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Worker_Login")
  profile      profile @relation(fields: [profileID], references: [profileID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Worker_Profile")
  camp         camp    @relation(fields: [campID], references: [campID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Worker_Camp")

  @@index([campID], map: "FK_Worker_Camp")
  @@index([jobID], map: "FK_Worker_Job")
  @@index([loginID], map: "FK_Worker_Login")
  @@index([profileID], map: "FK_Worker_Profile")
}

view view_menu_food_alergen {
  id           String?  @db.VarChar(36)
  number       String   @db.VarChar(30)
  alergen_name String   @db.VarChar(50)
  description  String?  @db.VarChar(750)
  food_name    String   @db.VarChar(75)
  type         Int      @db.TinyInt
  menuID       Int      @default(0) @db.UnsignedInt
  time         DateTime @db.DateTime(0)
  foodID       Int      @unique @default(0)
  campID       Int      @default(0)
}

view view_user_represantative {
  id               String?  @db.VarChar(36)
  first_name       String   @db.VarChar(30)
  last_name        String   @db.VarChar(30)
  birthdate        DateTime @db.Date
  pin              BigInt
  phone_number     BigInt
  userID           Int      @unique @default(0)
  rep_first_name   String   @db.VarChar(30)
  rep_last_name    String   @db.VarChar(30)
  rep_birthdate    DateTime @db.Date
  rep_pin          BigInt
  rep_email        String   @db.VarChar(50)
  rep_phone_number BigInt
  campID           Int      @default(0)
}

view view_worker_job {
  id           String? @db.VarChar(36)
  last_name    String? @db.VarChar(35)
  first_name   String? @db.VarChar(35)
  type         Int     @db.TinyInt
  description  String? @db.VarChar(250)
  email        String? @db.VarChar(50)
  phone_number BigInt?
  title        String? @db.VarChar(20)
  workerID     Int     @unique @default(0)
  campID       Int     @default(0)
}
