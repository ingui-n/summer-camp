generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model camp {
  date_from    DateTime       @db.Date
  date_to      DateTime       @db.Date
  description  String?        @db.VarChar(4000)
  name         String         @db.VarChar(50)
  price        Int
  campID       Int            @id @default(autoincrement()) @db.UnsignedInt
  directoryID  Int            @db.UnsignedInt
  directory    directory      @relation(fields: [directoryID], references: [directoryID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Camp_Directory")
  menu         menu[]
  program      program[]
  registration registration[]
  worker       worker[]

  @@index([directoryID], map: "directoryID")
}

model city {
  city        String    @db.VarChar(60)
  zip_code    Int
  cityID      Int       @id @default(autoincrement()) @db.UnsignedInt
  directoryID Int       @db.UnsignedInt
  directory   directory @relation(fields: [directoryID], references: [directoryID], onDelete: NoAction, onUpdate: NoAction, map: "FK_City_Directory")

  @@index([directoryID], map: "directoryID")
}

model directory {
  street               String                 @db.VarChar(50)
  directoryID          Int                    @id @default(autoincrement()) @db.UnsignedInt
  camp                 camp[]
  city                 city[]
  legal_representative legal_representative[]
  user                 user[]
}

model food {
  allergen    String? @db.VarChar(100)
  description String? @db.VarChar(750)
  name        String  @db.VarChar(75)
  type        Int     @db.TinyInt
  foodID      Int     @id @default(autoincrement()) @db.UnsignedInt
  menu        menu[]
}

model job {
  description String?  @db.VarChar(250)
  type        Int      @db.TinyInt
  jobID       Int      @id @default(autoincrement()) @db.UnsignedInt
  worker      worker[]
}

model legal_representative {
  birthdate              DateTime  @db.Date
  email                  String    @db.VarChar(50)
  first_name             String    @db.VarChar(30)
  last_name              String    @db.VarChar(30)
  phone_number           BigInt
  pin                    BigInt
  legal_representativeID Int       @id @default(autoincrement()) @db.UnsignedInt
  directoryID            Int       @db.UnsignedInt
  directory              directory @relation(fields: [directoryID], references: [directoryID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Legal_representative_Directory")
  user                   user[]

  @@index([directoryID], map: "FK_Legal_representative_Directory")
}

model menu {
  time   DateTime @db.DateTime(0)
  menuID Int      @id @default(autoincrement()) @db.UnsignedInt
  campID Int      @db.UnsignedInt
  foodID Int      @db.UnsignedInt
  camp   camp     @relation(fields: [campID], references: [campID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Menu_Camp")
  food   food     @relation(fields: [foodID], references: [foodID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Menu_Food")

  @@index([campID], map: "FK_Menu_Camp")
  @@index([foodID], map: "FK_Menu_Food")
}

model profile {
  modification_date DateTime @db.DateTime(0)
  suffix            String   @db.VarChar(8)
  type              String   @db.VarChar(50)
  upload_date       DateTime @db.DateTime(0)
  profileID         Int      @id @default(autoincrement()) @db.UnsignedInt
  worker            worker[]
}

model program {
  description String?  @db.VarChar(4000)
  from        DateTime @db.DateTime(0)
  name        String   @db.VarChar(60)
  to          DateTime @db.DateTime(0)
  programID   Int      @id @default(autoincrement()) @db.UnsignedInt
  campID      Int      @db.UnsignedInt
  camp        camp     @relation(fields: [campID], references: [campID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Program_Camp")

  @@index([campID], map: "FK_Program_Camp")
}

model registration {
  date           DateTime @db.DateTime(0)
  is_paid        Boolean
  registrationID Int      @id @default(autoincrement()) @db.UnsignedInt
  userID         Int      @db.UnsignedInt
  campID         Int      @db.UnsignedInt
  camp           camp     @relation(fields: [campID], references: [campID], onDelete: NoAction, onUpdate: NoAction, map: "FK_registration_camp")
  user           user     @relation(fields: [userID], references: [userID], onDelete: NoAction, onUpdate: NoAction, map: "FK_registration_user")

  @@index([campID], map: "FK_registration_camp")
  @@index([userID], map: "userID")
}

model user {
  birthdate              DateTime              @db.Date
  first_name             String                @db.VarChar(30)
  last_name              String                @db.VarChar(30)
  phone_number           BigInt
  pin                    BigInt
  userID                 Int                   @id @default(autoincrement()) @db.UnsignedInt
  directoryID            Int                   @db.UnsignedInt
  legal_representativeID Int?                  @db.UnsignedInt
  loginID                Int                   @db.UnsignedInt
  registration           registration[]
  directory              directory             @relation(fields: [directoryID], references: [directoryID], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Directory")
  legal_representative   legal_representative? @relation(fields: [legal_representativeID], references: [legal_representativeID], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Legal_representative")
  login                  login                 @relation(fields: [loginID], references: [loginID], onDelete: NoAction, onUpdate: NoAction, map: "FK_User_Login")

  @@index([directoryID], map: "FK_User_Directory")
  @@index([legal_representativeID], map: "FK_User_Legal_representative")
  @@index([loginID], map: "FK_User_Login")
}

model worker {
  email        String? @db.VarChar(50)
  first_name   String? @db.VarChar(35)
  last_name    String? @db.VarChar(35)
  phone_number BigInt?
  title        String? @db.VarChar(20)
  workerID     Int     @id @default(autoincrement()) @db.UnsignedInt
  campID       Int     @db.UnsignedInt
  jobID        Int     @db.UnsignedInt
  loginID      Int?    @db.UnsignedInt
  profileID    Int     @db.UnsignedInt
  camp         camp    @relation(fields: [campID], references: [campID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Worker_Camp")
  job          job     @relation(fields: [jobID], references: [jobID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Worker_Job")
  login        login?  @relation(fields: [loginID], references: [loginID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Worker_Login")
  profile      profile @relation(fields: [profileID], references: [profileID], onDelete: NoAction, onUpdate: NoAction, map: "FK_Worker_Profile")

  @@index([campID], map: "FK_Worker_Camp")
  @@index([jobID], map: "FK_Worker_Job")
  @@index([loginID], map: "FK_Worker_Login")
  @@index([profileID], map: "FK_Worker_Profile")
}

model login {
  email         String   @db.VarChar(50)
  function_type Int      @db.TinyInt
  login         String   @unique(map: "login") @db.VarChar(30)
  password      String   @db.VarChar(60)
  loginID       Int      @id @default(autoincrement()) @db.UnsignedInt
  user          user[]
  worker        worker[]
}
